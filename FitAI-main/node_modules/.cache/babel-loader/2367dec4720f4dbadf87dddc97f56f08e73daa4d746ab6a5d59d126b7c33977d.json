{"ast":null,"code":"// src/api/backendApi.js\n\n// Simulate a database of users and their diet plans\nconst mockUsers = {\n  \"test@example.com\": {\n    userId: \"user_test_123\",\n    email: \"test@example.com\",\n    password: \"password123\",\n    // In a real app, never store plain passwords\n    dietPlans: [] // Array to store multiple diet plans\n  }\n};\nlet nextUserId = 1000; // For new sign-ups\n\n// Helper to generate a unique plan ID\nconst generatePlanId = () => `plan_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\n\n// Helper to generate a mock diet plan based on some user info (for demonstration)\nconst createMockDietPlan = (userId, preferences = {}) => {\n  const baseCalories = preferences.calories || Math.floor(Math.random() * (2500 - 1800 + 1)) + 1800; // 1800-2500\n  const date = new Date().toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n  const time = new Date().toLocaleTimeString('en-US');\n  return {\n    id: generatePlanId(),\n    userId: userId,\n    date: date,\n    generatedAt: `${date} ${time}`,\n    calories: baseCalories,\n    macronutrients: {\n      protein: `${Math.round(baseCalories * 0.30 / 4)}g`,\n      // 30% protein\n      carbs: `${Math.round(baseCalories * 0.40 / 4)}g`,\n      // 40% carbs\n      fats: `${Math.round(baseCalories * 0.30 / 9)}g` // 30% fats\n    },\n    notes: `This plan is a dynamic recommendation based on your last input and current goals. Keep hydrating!`,\n    meals: [{\n      time: \"7:00 AM\",\n      item: \"Breakfast\",\n      description: \"Oatmeal with berries and nuts, protein shake.\"\n    }, {\n      time: \"10:00 AM\",\n      item: \"Morning Snack\",\n      description: \"Apple slices with almond butter.\"\n    }, {\n      time: \"1:00 PM\",\n      item: \"Lunch\",\n      description: \"Grilled chicken salad with mixed greens and vinaigrette.\"\n    }, {\n      time: \"4:00 PM\",\n      item: \"Afternoon Snack\",\n      description: \"Greek yogurt with a sprinkle of seeds.\"\n    }, {\n      time: \"7:00 PM\",\n      item: \"Dinner\",\n      description: \"Baked salmon with quinoa and steamed asparagus.\"\n    }]\n  };\n};\n\n/**\n * Mocks user sign-up.\n * @param {object} userData - User registration data (email, password, fitness goals, etc.).\n * @returns {Promise<object>} - A promise resolving to { success: boolean, user?: object, message?: string }.\n */\nexport const signUp = async userData => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      if (mockUsers[userData.email]) {\n        resolve({\n          success: false,\n          message: \"User with this email already exists.\"\n        });\n      } else {\n        const newUser = {\n          userId: `user_${nextUserId++}`,\n          email: userData.email,\n          password: userData.password,\n          ...userData,\n          // Store all user data from signup form\n          dietPlans: []\n        };\n        // Generate an initial diet plan upon sign-up\n        const initialPlan = createMockDietPlan(newUser.userId, {\n          calories: 2000,\n          // Example: base calories off user input from sign-up form later\n          goals: userData.fitnessGoals\n        });\n        newUser.dietPlans.push(initialPlan); // Add the initial plan\n        mockUsers[userData.email] = newUser;\n        console.log(\"Mock User Database:\", mockUsers);\n        resolve({\n          success: true,\n          user: newUser,\n          message: \"Sign up successful.\"\n        });\n      }\n    }, 1000);\n  });\n};\n\n/**\n * Mocks user sign-in.\n * @param {object} credentials - User sign-in credentials (email, password).\n * @returns {Promise<object>} - A promise resolving to { success: boolean, user?: object, message?: string }.\n */\nexport const signIn = async credentials => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const user = mockUsers[credentials.email];\n      // Hardcoded check for 'test@example.com' for simplicity\n      if (user && user.password === credentials.password) {\n        resolve({\n          success: true,\n          user: user,\n          message: \"Sign in successful.\"\n        });\n      } else {\n        resolve({\n          success: false,\n          message: \"Invalid credentials.\"\n        });\n      }\n    }, 1000);\n  });\n};\n\n/**\n * Mocks fetching a user's *current* diet plan.\n * This will now fetch the latest plan.\n * @param {string} userId - The ID of the user.\n * @returns {Promise<object>} - A promise resolving to { success: boolean, plan?: object, message?: string }.\n */\nexport const getDietPlan = async userId => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const userEmail = Object.keys(mockUsers).find(email => mockUsers[email].userId === userId);\n      const user = mockUsers[userEmail];\n      if (user && user.dietPlans.length > 0) {\n        // Return the latest plan\n        const latestPlan = user.dietPlans[user.dietPlans.length - 1];\n        resolve({\n          success: true,\n          plan: latestPlan\n        });\n      } else if (user) {\n        resolve({\n          success: false,\n          message: \"No diet plans found for this user.\"\n        });\n      } else {\n        resolve({\n          success: false,\n          message: \"User not found.\"\n        });\n      }\n    }, 500);\n  });\n};\n\n/**\n * Mocks generating a new diet plan for a user.\n * @param {string} userId - The ID of the user.\n * @param {object} [preferences] - Optional preferences for the new plan.\n * @returns {Promise<object>} - A promise resolving to { success: boolean, plan?: object, message?: string }.\n */\nexport const generateNewDietPlan = async (userId, preferences = {}) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const userEmail = Object.keys(mockUsers).find(email => mockUsers[email].userId === userId);\n      const user = mockUsers[userEmail];\n      if (user) {\n        const newPlan = createMockDietPlan(userId, preferences);\n        user.dietPlans.push(newPlan); // Add to the user's plans\n        resolve({\n          success: true,\n          plan: newPlan,\n          message: \"New diet plan generated.\"\n        });\n      } else {\n        resolve({\n          success: false,\n          message: \"User not found.\"\n        });\n      }\n    }, 1500); // Simulate some processing time\n  });\n};\n\n/**\n * Mocks fetching all previously generated diet plans for a user.\n * @param {string} userId - The ID of the user.\n * @returns {Promise<object>} - A promise resolving to { success: boolean, plans?: Array<object>, message?: string }.\n */\nexport const getDietPlanHistory = async userId => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const userEmail = Object.keys(mockUsers).find(email => mockUsers[email].userId === userId);\n      const user = mockUsers[userEmail];\n      if (user) {\n        // Return plans in reverse chronological order (latest first)\n        const sortedPlans = [...user.dietPlans].reverse();\n        resolve({\n          success: true,\n          plans: sortedPlans\n        });\n      } else {\n        resolve({\n          success: false,\n          message: \"User not found or no plans available.\"\n        });\n      }\n    }, 700);\n  });\n};\n\n// You can uncomment this to add a default user for testing without signing up every time\n/*\n// Ensure the test user has an initial plan when the app starts\nif (mockUsers[\"test@example.com\"].dietPlans.length === 0) {\n  mockUsers[\"test@example.com\"].dietPlans.push(createMockDietPlan(\"user_test_123\"));\n}\n*/","map":{"version":3,"names":["mockUsers","userId","email","password","dietPlans","nextUserId","generatePlanId","Date","now","Math","floor","random","createMockDietPlan","preferences","baseCalories","calories","date","toLocaleDateString","year","month","day","time","toLocaleTimeString","id","generatedAt","macronutrients","protein","round","carbs","fats","notes","meals","item","description","signUp","userData","Promise","resolve","setTimeout","success","message","newUser","initialPlan","goals","fitnessGoals","push","console","log","user","signIn","credentials","getDietPlan","userEmail","Object","keys","find","length","latestPlan","plan","generateNewDietPlan","newPlan","getDietPlanHistory","sortedPlans","reverse","plans"],"sources":["C:/Users/91924/OneDrive/Desktop/FitAI-main/FitAI-main/src/api/backendApi.js"],"sourcesContent":["// src/api/backendApi.js\n\n// Simulate a database of users and their diet plans\nconst mockUsers = {\n  \"test@example.com\": {\n    userId: \"user_test_123\",\n    email: \"test@example.com\",\n    password: \"password123\", // In a real app, never store plain passwords\n    dietPlans: [], // Array to store multiple diet plans\n  },\n};\n\nlet nextUserId = 1000; // For new sign-ups\n\n// Helper to generate a unique plan ID\nconst generatePlanId = () => `plan_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\n\n// Helper to generate a mock diet plan based on some user info (for demonstration)\nconst createMockDietPlan = (userId, preferences = {}) => {\n  const baseCalories = preferences.calories || Math.floor(Math.random() * (2500 - 1800 + 1)) + 1800; // 1800-2500\n  const date = new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n  const time = new Date().toLocaleTimeString('en-US');\n\n  return {\n    id: generatePlanId(),\n    userId: userId,\n    date: date,\n    generatedAt: `${date} ${time}`,\n    calories: baseCalories,\n    macronutrients: {\n      protein: `${Math.round(baseCalories * 0.30 / 4)}g`, // 30% protein\n      carbs: `${Math.round(baseCalories * 0.40 / 4)}g`,   // 40% carbs\n      fats: `${Math.round(baseCalories * 0.30 / 9)}g`,     // 30% fats\n    },\n    notes: `This plan is a dynamic recommendation based on your last input and current goals. Keep hydrating!`,\n    meals: [\n      { time: \"7:00 AM\", item: \"Breakfast\", description: \"Oatmeal with berries and nuts, protein shake.\" },\n      { time: \"10:00 AM\", item: \"Morning Snack\", description: \"Apple slices with almond butter.\" },\n      { time: \"1:00 PM\", item: \"Lunch\", description: \"Grilled chicken salad with mixed greens and vinaigrette.\" },\n      { time: \"4:00 PM\", item: \"Afternoon Snack\", description: \"Greek yogurt with a sprinkle of seeds.\" },\n      { time: \"7:00 PM\", item: \"Dinner\", description: \"Baked salmon with quinoa and steamed asparagus.\" },\n    ],\n  };\n};\n\n/**\n * Mocks user sign-up.\n * @param {object} userData - User registration data (email, password, fitness goals, etc.).\n * @returns {Promise<object>} - A promise resolving to { success: boolean, user?: object, message?: string }.\n */\nexport const signUp = async (userData) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      if (mockUsers[userData.email]) {\n        resolve({ success: false, message: \"User with this email already exists.\" });\n      } else {\n        const newUser = {\n          userId: `user_${nextUserId++}`,\n          email: userData.email,\n          password: userData.password,\n          ...userData, // Store all user data from signup form\n          dietPlans: [],\n        };\n        // Generate an initial diet plan upon sign-up\n        const initialPlan = createMockDietPlan(newUser.userId, {\n          calories: 2000, // Example: base calories off user input from sign-up form later\n          goals: userData.fitnessGoals,\n        });\n        newUser.dietPlans.push(initialPlan); // Add the initial plan\n        mockUsers[userData.email] = newUser;\n        console.log(\"Mock User Database:\", mockUsers);\n        resolve({ success: true, user: newUser, message: \"Sign up successful.\" });\n      }\n    }, 1000);\n  });\n};\n\n/**\n * Mocks user sign-in.\n * @param {object} credentials - User sign-in credentials (email, password).\n * @returns {Promise<object>} - A promise resolving to { success: boolean, user?: object, message?: string }.\n */\nexport const signIn = async (credentials) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const user = mockUsers[credentials.email];\n      // Hardcoded check for 'test@example.com' for simplicity\n      if (user && user.password === credentials.password) {\n        resolve({ success: true, user: user, message: \"Sign in successful.\" });\n      } else {\n        resolve({ success: false, message: \"Invalid credentials.\" });\n      }\n    }, 1000);\n  });\n};\n\n/**\n * Mocks fetching a user's *current* diet plan.\n * This will now fetch the latest plan.\n * @param {string} userId - The ID of the user.\n * @returns {Promise<object>} - A promise resolving to { success: boolean, plan?: object, message?: string }.\n */\nexport const getDietPlan = async (userId) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const userEmail = Object.keys(mockUsers).find(\n        (email) => mockUsers[email].userId === userId\n      );\n      const user = mockUsers[userEmail];\n      if (user && user.dietPlans.length > 0) {\n        // Return the latest plan\n        const latestPlan = user.dietPlans[user.dietPlans.length - 1];\n        resolve({ success: true, plan: latestPlan });\n      } else if (user) {\n        resolve({ success: false, message: \"No diet plans found for this user.\" });\n      }\n      else {\n        resolve({ success: false, message: \"User not found.\" });\n      }\n    }, 500);\n  });\n};\n\n/**\n * Mocks generating a new diet plan for a user.\n * @param {string} userId - The ID of the user.\n * @param {object} [preferences] - Optional preferences for the new plan.\n * @returns {Promise<object>} - A promise resolving to { success: boolean, plan?: object, message?: string }.\n */\nexport const generateNewDietPlan = async (userId, preferences = {}) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const userEmail = Object.keys(mockUsers).find(\n        (email) => mockUsers[email].userId === userId\n      );\n      const user = mockUsers[userEmail];\n      if (user) {\n        const newPlan = createMockDietPlan(userId, preferences);\n        user.dietPlans.push(newPlan); // Add to the user's plans\n        resolve({ success: true, plan: newPlan, message: \"New diet plan generated.\" });\n      } else {\n        resolve({ success: false, message: \"User not found.\" });\n      }\n    }, 1500); // Simulate some processing time\n  });\n};\n\n/**\n * Mocks fetching all previously generated diet plans for a user.\n * @param {string} userId - The ID of the user.\n * @returns {Promise<object>} - A promise resolving to { success: boolean, plans?: Array<object>, message?: string }.\n */\nexport const getDietPlanHistory = async (userId) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const userEmail = Object.keys(mockUsers).find(\n        (email) => mockUsers[email].userId === userId\n      );\n      const user = mockUsers[userEmail];\n      if (user) {\n        // Return plans in reverse chronological order (latest first)\n        const sortedPlans = [...user.dietPlans].reverse();\n        resolve({ success: true, plans: sortedPlans });\n      } else {\n        resolve({ success: false, message: \"User not found or no plans available.\" });\n      }\n    }, 700);\n  });\n};\n\n// You can uncomment this to add a default user for testing without signing up every time\n/*\n// Ensure the test user has an initial plan when the app starts\nif (mockUsers[\"test@example.com\"].dietPlans.length === 0) {\n  mockUsers[\"test@example.com\"].dietPlans.push(createMockDietPlan(\"user_test_123\"));\n}\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}